name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  setup:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1,2,3,4]
        shardTotal: [4]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          fail-on-cache-miss: true

      - name: Restore Playwright browsers cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          fail-on-cache-miss: true

      - name: Run Playwright tests
        run: npx playwright test --reporter=blob --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}

      - name: Upload report to github actions artifacts
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: blob-report-${{ matrix.shardIndex }}
          path: blob-report
          retention-days: 1

  merge-reports:
    if: ${{ always() }}
    needs: [ setup, test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          fail-on-cache-miss: true

      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: blob-report-*
          merge-multiple: true

      - name: Merge into HTML Report
        run: npx playwright merge-reports --reporter json ./all-blob-reports > summary.json
      - name: Upload Json Summary
        uses: actions/upload-artifact@v4
        with:
          name: summary-json
          path: summary.json
          retention-days: 1

      - name: Merge into HTML Report
        run: npx playwright merge-reports --reporter html ./all-blob-reports
      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: html-report--attempt-${{ github.run_attempt }}
          path: playwright-report
          retention-days: 14

  send-slack-notification:
    if: ${{ always() }}
    needs: [ merge-reports ]
    runs-on: ubuntu-latest
    steps:
      - name: download all blob report
        uses: actions/download-artifact@v4
        with:
          name: summary-json
          path: .
      
      - name: Debug file structure
        run: |
          echo "=== Current directory contents ==="
          ls -la
          echo "=== Looking for summary.json ==="
          find . -name "summary.json" -type f
          echo "=== Checking if summary.json exists and is readable ==="
          if [ -f "summary.json" ]; then
            echo "summary.json exists"
            echo "File size: $(wc -c < summary.json) bytes"
            echo "First 10 lines:"
            head -10 summary.json
          else
            echo "summary.json NOT FOUND"
            echo "Available files:"
            find . -type f -name "*.json"
          fi
      
      - name: Parse Playwright result
        id: result
        run: |
          # Check if summary.json exists and is valid
          if [ ! -f "summary.json" ]; then
            echo "ERROR: summary.json not found"
            echo "summary=ERROR: No test results found" >> $GITHUB_OUTPUT
            echo "color=#ff0000" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Validate JSON structure
          if ! jq empty summary.json 2>/dev/null; then
            echo "ERROR: summary.json is not valid JSON"
            echo "summary=ERROR: Invalid test results format" >> $GITHUB_OUTPUT
            echo "color=#ff0000" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Parse failed tests from the correct JSON structure
          fails=$(jq -r '.suites[].suites[].specs[] | select(.ok == false) | .title' summary.json 2>/dev/null || echo "")
          count=$(echo "$fails" | grep -c . || true)
          echo "Found $count failed tests"

          if [ "$count" -eq 0 ]; then
            echo "summary=TEST PASSED ALL" >> $GITHUB_OUTPUT
            echo "color=#36a64f" >> $GITHUB_OUTPUT
          else
            fails_formatted=$(echo "$fails" | sed ':a;N;$!ba;s/\n/\\n/g')
            echo "summary=Failed: $count tests\n$fails_formatted" >> $GITHUB_OUTPUT
            echo "color=#ff0000" >> $GITHUB_OUTPUT
          fi

      - name: Send summary to Slack
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "text": "${{ steps.result.outputs.summary }}",
              "attachments": [
                {
                  "color": "${{ steps.result.outputs.color }}",
                  "text": "${{ steps.result.outputs.summary }}"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}